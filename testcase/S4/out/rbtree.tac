VTBL<_Main> {
    0
    "Main"
}

VTBL<_Rng> {
    0
    "Rng"
    FUNC<_Rng.next>
}

VTBL<_Node> {
    0
    "Node"
}

VTBL<_RBTree> {
    VTBL<_Node>
    "RBTree"
    FUNC<_RBTree.transplant>
    FUNC<_RBTree.rotate>
    FUNC<_RBTree.insert_fix>
    FUNC<_RBTree.insert>
    FUNC<_RBTree.delete_fix>
    FUNC<_RBTree.delete>
    FUNC<_RBTree.print>
    FUNC<_RBTree.print_impl>
}

FUNC<_Main._new> {
    parm 4
    %0 = call _Alloc
    %1 = VTBL<_Main>
    *(%0 + 0) = %1
    return %0
}

FUNC<_Rng._new> {
    parm 8
    %0 = call _Alloc
    %1 = VTBL<_Rng>
    *(%0 + 0) = %1
    *(%0 + 4) = 0
    return %0
}

FUNC<_Node._new> {
    parm 24
    %0 = call _Alloc
    %1 = VTBL<_Node>
    *(%0 + 0) = %1
    *(%0 + 4) = 0
    *(%0 + 8) = 0
    *(%0 + 12) = 0
    *(%0 + 16) = 0
    *(%0 + 20) = 0
    return %0
}

FUNC<_RBTree._new> {
    parm 32
    %0 = call _Alloc
    %1 = VTBL<_RBTree>
    *(%0 + 0) = %1
    *(%0 + 4) = 0
    *(%0 + 8) = 0
    *(%0 + 12) = 0
    *(%0 + 16) = 0
    *(%0 + 20) = 0
    *(%0 + 24) = 0
    *(%0 + 28) = 0
    return %0
}

FUNC<main> {
    parm 19260817
    %1 = call _Rng.make
    %3 = call _RBTree.make1
    %4 = 0
    branch %8
    %1:
    %5 = 0
    branch %3
    %2:
    parm %1
    %7 = *(%1 + 0)
    %7 = *(%7 + 8)
    %6 = call %7
    %8 = (%6 % 500)
    parm %3
    parm %8
    %9 = *(%3 + 0)
    %9 = *(%9 + 20)
    call %9
    %10 = (%5 + 1)
    %5 = %10
    %3:
    %11 = (%5 < 500)
    if (%11 != 0) branch %2
    %12 = 0
    branch %6
    %5:
    parm %1
    %14 = *(%1 + 0)
    %14 = *(%14 + 8)
    %13 = call %14
    %15 = (%13 % 500)
    parm %3
    parm %15
    %16 = *(%3 + 0)
    %16 = *(%16 + 28)
    call %16
    %17 = (%12 + 1)
    %12 = %17
    %6:
    %18 = (%12 < 500)
    if (%18 != 0) branch %5
    %19 = (%4 + 1)
    %4 = %19
    %8:
    %20 = (%4 < 5)
    if (%20 != 0) branch %1
    parm %3
    %21 = *(%3 + 0)
    %21 = *(%21 + 32)
    call %21
    return
}

FUNC<_Rng.make> {
    %2 = call _Rng._new
    *(%2 + 4) = %0
    return %2
}

FUNC<_Rng.next> {
    %1 = *(%0 + 4)
    %2 = (%1 % 10000)
    %3 = (15625 * %2)
    %4 = (%3 + 22221)
    %5 = (%4 % 65536)
    *(%0 + 4) = %5
    %6 = *(%0 + 4)
    return %6
}

FUNC<_Node.make> {
    %4 = call _Node._new
    *(%4 + 4) = %2
    *(%4 + 16) = %0
    *(%4 + 8) = %1
    *(%4 + 12) = %1
    *(%4 + 20) = 1
    return %4
}

FUNC<_RBTree.make1> {
    %1 = call _RBTree._new
    %3 = call _Node._new
    *(%3 + 16) = %3
    *(%3 + 8) = %3
    *(%3 + 12) = %3
    *(%1 + 24) = %3
    *(%1 + 28) = %3
    return %1
}

FUNC<_RBTree.transplant> {
    %4 = *(%1 + 16)
    %5 = *(%0 + 28)
    %6 = (%4 == %5)
    if (%6 == 0) branch %2
    *(%0 + 24) = %2
    branch %5
    %2:
    %7 = *(%4 + 12)
    %8 = (%7 == %1)
    if (%8 == 0) branch %4
    *(%4 + 12) = %2
    branch %5
    %4:
    *(%4 + 8) = %2
    %5:
    *(%2 + 16) = %4
    return
}

FUNC<_RBTree.rotate> {
    %3 = *(%1 + 16)
    %5 = *(%3 + 16)
    *(%1 + 16) = %5
    %6 = *(%0 + 28)
    %7 = (%5 == %6)
    if (%7 == 0) branch %2
    *(%0 + 24) = %1
    branch %5
    %2:
    %8 = *(%5 + 12)
    %9 = (%8 == %3)
    if (%9 == 0) branch %4
    *(%5 + 12) = %1
    branch %5
    %4:
    *(%5 + 8) = %1
    %5:
    %10 = *(%3 + 8)
    %11 = (%10 == %1)
    if (%11 == 0) branch %7
    %12 = *(%1 + 12)
    *(%3 + 8) = %12
    %13 = *(%1 + 12)
    *(%13 + 16) = %3
    *(%1 + 12) = %3
    branch %8
    %7:
    %14 = *(%1 + 8)
    *(%3 + 12) = %14
    %15 = *(%1 + 8)
    *(%15 + 16) = %3
    *(%1 + 8) = %3
    %8:
    *(%3 + 16) = %1
    return
}

FUNC<_RBTree.insert_fix> {
    branch %9
    %1:
    %2 = %23
    %5 = *(%23 + 16)
    %4 = %5
    %24 = *(%5 + 8)
    %8 = (%24 == %23)
    if (%8 == 0) branch %3
    %9 = %24
    branch %4
    %3:
    %11 = *(%5 + 12)
    %9 = %11
    %4:
    %12 = *(%9 + 20)
    if (%12 == 0) branch %6
    *(%23 + 20) = 0
    *(%9 + 20) = 0
    *(%5 + 20) = 1
    %1 = %5
    branch %9
    %6:
    %13 = *(%23 + 8)
    %14 = (%13 == %1)
    %15 = (%14 != %8)
    if (%15 == 0) branch %8
    parm %0
    parm %1
    %16 = *(%0 + 0)
    %16 = *(%16 + 12)
    call %16
    %17 = %1
    %1 = %23
    %2 = %17
    %18 = *(%17 + 16)
    %4 = %18
    %8:
    *(%2 + 20) = 0
    *(%4 + 20) = 1
    parm %0
    parm %2
    %19 = *(%0 + 0)
    %19 = *(%19 + 12)
    call %19
    %9:
    %23 = *(%1 + 16)
    %21 = *(%23 + 20)
    if (%21 != 0) branch %1
    %22 = *(%0 + 24)
    *(%22 + 20) = 0
    return
}

FUNC<_RBTree.insert> {
    %3 = *(%0 + 24)
    %2 = %3
    %23 = *(%0 + 28)
    %4 = %23
    branch %6
    %1:
    %4 = %2
    %22 = *(%2 + 4)
    %7 = (%22 == %1)
    if (%7 == 0) branch %3
    return
    %3:
    %9 = (%22 < %1)
    if (%9 == 0) branch %5
    %10 = *(%2 + 12)
    %2 = %10
    branch %6
    %5:
    %11 = *(%2 + 8)
    %2 = %11
    %6:
    %13 = (%2 != %23)
    if (%13 != 0) branch %1
    parm %4
    parm %23
    parm %1
    %15 = call _Node.make
    %18 = (%4 == %23)
    if (%18 == 0) branch %9
    *(%0 + 24) = %15
    branch %12
    %9:
    %19 = *(%4 + 4)
    %20 = (%19 < %1)
    if (%20 == 0) branch %11
    *(%4 + 12) = %15
    branch %12
    %11:
    *(%4 + 8) = %15
    %12:
    parm %0
    parm %15
    %21 = *(%0 + 0)
    %21 = *(%21 + 16)
    call %21
    return
}

FUNC<_RBTree.delete_fix> {
    branch %17
    %1:
    %3 = *(%1 + 16)
    %41 = *(%3 + 8)
    %6 = (%41 == %1)
    if (%6 == 0) branch %3
    %8 = *(%3 + 12)
    %7 = %8
    branch %4
    %3:
    %7 = %41
    %4:
    %10 = *(%7 + 20)
    if (%10 == 0) branch %8
    *(%7 + 20) = 0
    *(%3 + 20) = 1
    parm %0
    parm %7
    %11 = *(%0 + 0)
    %11 = *(%11 + 12)
    call %11
    if (%6 == 0) branch %7
    %12 = *(%3 + 12)
    %7 = %12
    branch %8
    %7:
    %13 = *(%3 + 8)
    %7 = %13
    %8:
    %43 = *(%7 + 8)
    %15 = *(%43 + 20)
    %16 = ! %15
    %42 = *(%7 + 12)
    %18 = *(%42 + 20)
    %19 = ! %18
    %20 = (%16 && %19)
    if (%20 == 0) branch %10
    *(%7 + 20) = 0
    %1 = %3
    branch %17
    %10:
    %21 = %42
    %23 = %43
    if (%6 == 0) branch %12
    %21 = %43
    %23 = %42
    %12:
    %26 = *(%23 + 20)
    %27 = ! %26
    if (%27 == 0) branch %16
    *(%21 + 20) = 0
    *(%7 + 20) = 1
    parm %0
    parm %21
    %28 = *(%0 + 0)
    %28 = *(%28 + 12)
    call %28
    if (%6 == 0) branch %15
    %29 = *(%3 + 12)
    %7 = %29
    %30 = *(%29 + 12)
    %23 = %30
    branch %16
    %15:
    %31 = *(%3 + 8)
    %7 = %31
    %32 = *(%31 + 8)
    %23 = %32
    %16:
    %33 = *(%3 + 20)
    *(%7 + 20) = %33
    *(%3 + 20) = 0
    *(%23 + 20) = 0
    parm %0
    parm %7
    %34 = *(%0 + 0)
    %34 = *(%34 + 12)
    call %34
    %35 = *(%0 + 24)
    %1 = %35
    %17:
    %36 = *(%0 + 24)
    %37 = (%1 != %36)
    %38 = *(%1 + 20)
    %39 = ! %38
    %40 = (%37 && %39)
    if (%40 != 0) branch %1
    *(%1 + 20) = 0
    return
}

FUNC<_RBTree.delete> {
    %3 = *(%0 + 24)
    %2 = %3
    branch %6
    %1:
    %44 = *(%2 + 4)
    %5 = (%44 == %1)
    if (%5 == 0) branch %3
    branch %7
    %3:
    %7 = (%44 < %1)
    if (%7 == 0) branch %5
    %8 = *(%2 + 12)
    %2 = %8
    branch %6
    %5:
    %9 = *(%2 + 8)
    %2 = %9
    %6:
    %45 = *(%0 + 28)
    %11 = (%2 != %45)
    if (%11 != 0) branch %1
    %7:
    %15 = *(%2 + 20)
    %14 = %15
    %47 = *(%2 + 8)
    %18 = (%47 == %45)
    if (%18 == 0) branch %9
    %19 = *(%2 + 12)
    %13 = %19
    parm %0
    parm %2
    parm %19
    %51 = *(%0 + 0)
    %20 = *(%51 + 8)
    call %20
    branch %18
    %9:
    %48 = *(%2 + 12)
    %23 = (%48 == %45)
    if (%23 == 0) branch %11
    %13 = %47
    parm %0
    parm %2
    parm %47
    %51 = *(%0 + 0)
    %25 = *(%51 + 8)
    call %25
    branch %18
    %11:
    %12 = %48
    branch %13
    %12:
    %12 = %49
    %13:
    %49 = *(%12 + 8)
    %30 = (%49 != %45)
    if (%30 != 0) branch %12
    %31 = *(%12 + 20)
    %14 = %31
    %32 = *(%12 + 12)
    %13 = %32
    %33 = *(%12 + 16)
    %34 = (%33 == %2)
    if (%34 == 0) branch %16
    *(%32 + 16) = %12
    branch %17
    %16:
    parm %0
    parm %12
    parm %32
    %35 = *(%0 + 0)
    %35 = *(%35 + 8)
    call %35
    %36 = *(%2 + 12)
    *(%12 + 12) = %36
    %37 = *(%12 + 12)
    *(%37 + 16) = %12
    %17:
    parm %0
    parm %2
    parm %12
    %51 = *(%0 + 0)
    %38 = *(%51 + 8)
    call %38
    %39 = *(%2 + 8)
    *(%12 + 8) = %39
    %40 = *(%12 + 8)
    *(%40 + 16) = %12
    %41 = *(%2 + 20)
    *(%12 + 20) = %41
    %18:
    %42 = ! %14
    if (%42 == 0) branch %20
    parm %0
    parm %13
    %43 = *(%51 + 24)
    call %43
    %20:
    return
}

FUNC<_RBTree.print> {
    %1 = *(%0 + 24)
    parm %0
    parm %1
    %2 = *(%0 + 0)
    %2 = *(%2 + 36)
    call %2
    return
}

FUNC<_RBTree.print_impl> {
    %2 = *(%0 + 28)
    %3 = (%1 == %2)
    if (%3 == 0) branch %2
    return
    %2:
    %4 = *(%1 + 8)
    parm %0
    parm %4
    %10 = *(%0 + 0)
    %11 = *(%10 + 36)
    call %11
    %6 = *(%1 + 4)
    parm %6
    call _PrintInt
    %7 = " "
    parm %7
    call _PrintString
    %8 = *(%1 + 12)
    parm %0
    parm %8
    call %11
    return
}

